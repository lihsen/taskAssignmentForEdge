package predictor

import (
	"fmt"
	"testing"
)

func TestRunTimePredictor(t *testing.T) {
	rtpredictor := NewRunTimePredictor(0)
	fecturePairList := []FeaturePair{{FeatureType_Job_Name, "HelloWorld"},{FeatureType_logic_Job_Name,"MapReduce"},{FeatureType_User_Name, "me"}}
	jobnamedata :=[]int64{94,120,105,99,106,100,111,98,89,102,116,88,98,110,81,106,108,102,92,100,101,109,107,96,116,99,92,96,109,102,109,101,125,83,96,99,101,115,102,99,101,108,93,105,84,99,91,93,103,89}//100, 10
	for _,v := range jobnamedata {
		rtpredictor.Update([]FeaturePair{fecturePairList[0]}, v)
	}
	joblogicnamedata := []int64{70,60,45,87,113,86,85,69,122,85,116,97,85,112,110,88,116,126,89,85,98,97,106,85,104,111,94,93,65,67,61,65,87,58,135,105,49,67,88,56,81,112,87,89,70,79,63,97,81,106} //90,20
	for _,v := range joblogicnamedata {
		rtpredictor.Update([]FeaturePair{fecturePairList[1]}, v)
	}
	useriddata := []int64{135,132,109,100,86,112,129,103,107,122,127,82,114,114,107,128,103,93,116,119,106,126,80,89,49,120,90,105,130,111,101,93,105,122,80,109,126,82,123,124,92,80,119,126,122,125,86,122,98,99}//110,20
	for _,v := range useriddata {
		rtpredictor.Update([]FeaturePair{fecturePairList[2]}, v)
	}
	rtpredictor.ShowPredictorUnit()
	fmt.Println(rtpredictor.Predict(fecturePairList))
}

func TestConnPredictor(t *testing.T) {
	connpred := NewConnPredictor(0)
	node_data :=[]int64{94,120,105,99,106,100,111,98,89,102,116,88,98,110,81,106,108,102,92,100,101,109,107,96,116,99,92,96,109,102,109,101,125,83,96,99,101,115,102,99,101,108,93,105,84,99,91,93,103,89}//100, 10
	for _, v := range node_data {
		connpred.Update(v)
	}
	frac := connpred.GetHistogram().CalFractionFromOffset(0.0)
	fmt.Println(frac.Frac)
}

func TestConnPredictor_GetHistogram(t *testing.T) {
	//运行时间
	rtpredictor := NewRunTimePredictor(0)
	fecturePairList := []FeaturePair{{FeatureType_Job_Name, "HelloWorld"},{FeatureType_logic_Job_Name,"MapReduce"},{FeatureType_User_Name, "me"}}
	jobnamedata :=[]int64{94,120,105,99,106,100,111,98,89,102,116,88,98,110,81,106,108,102,92,100,101,109,107,96,116,99,92,96,109,102,109,101,125,83,96,99,101,115,102,99,101,108,93,105,84,99,91,93,103,89}//100, 10
	for _,v := range jobnamedata {
		rtpredictor.Update([]FeaturePair{fecturePairList[0]}, v)
	}
	joblogicnamedata := []int64{70,60,45,87,113,86,85,69,122,85,116,97,85,112,110,88,116,126,89,85,98,97,106,85,104,111,94,93,65,67,61,65,87,58,135,105,49,67,88,56,81,112,87,89,70,79,63,97,81,106} //90,20
	for _,v := range joblogicnamedata {
		rtpredictor.Update([]FeaturePair{fecturePairList[1]}, v)
	}
	useriddata := []int64{135,132,109,100,86,112,129,103,107,122,127,82,114,114,107,128,103,93,116,119,106,126,80,89,49,120,90,105,130,111,101,93,105,122,80,109,126,82,123,124,92,80,119,126,122,125,86,122,98,99}//110,20
	for _,v := range useriddata {
		rtpredictor.Update([]FeaturePair{fecturePairList[2]}, v)
	}

	//节点存在时间
	connpred := NewConnPredictor(0)
	//node_data :=[]int{87,52,72,59,76,58,80,85,104,66,27,53,97,49,89,72,99,31,66,46,128,87,98,49,61,65,92,64,84,29,63,54,38,80,76,71,43,93,77,64,70,65,35,64,53,50,47,59,30,89}//70, 20
	//node_data := []int {100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100}
	//node_data := []int {200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200}
	//node_data := []int{120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120}
	//node_data := []int{136,119,119,96,151,116,99,161,113,102,111,95,86,196,170,129,82,94,115,144,80,50,77,130,132,134,116,126,106,146,79,134,95,110,137,151,86,158,140,118,114,113,111,121,122,145,166,134,114,139}
	node_data := []int64{129,69,167,135,127,146,133,73,112,113,93,204,76,96,84,61,110,106,197,108,67,200,182,109,45,98,112,134,107,142,140,57,73,83,95,104,121,31,
		97,182,67,167,138,119,129,42,116,200,125,122,136,119,119,96,151,116,99,161,113,102,111,95,86,196,170,129,82,94,115,144,80,50,77,130,132,134,116,126,106,146,
	    79,134,95,110,137,151,86,158,140,118,114,113,111,121,122,145,166,134,114,139}
	for _, v := range node_data {
		connpred.Update(v)
	}

	best_res, best_fec := rtpredictor.Predict(fecturePairList)
	print(best_res)
	best_histo := rtpredictor.FindHistogByFec(best_fec)
	fracRT := best_histo.CalFractionFromOffset(0.0)
	fmt.Println(fracRT.Frac)
	fracNode := connpred.GetHistogram().CalFractionFromOffset(0.0)
	fmt.Println(fracNode.Frac)

	proba, extraT := fracNode.JointProbaByEqualOrLess(fracRT)
	fmt.Printf("%f%%\n", proba*100)
	fmt.Println(extraT)

}